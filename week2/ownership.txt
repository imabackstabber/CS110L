Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", ref3.to_uppercase());
}
```
// 1. variable `s` has been changed, ref to s is no longer valid.
// (the compiler says cannot assign to `s` because it is borrowed)

// Solution: changing `ref1 = s` moves the ownership and hence is valid


Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
```
// 2. compiler says it's lack of lifttime parameter, 
// but yet after add `'static`, still throw error.
// because "cannot return reference to local variable `s`"

// Solution: just return String


Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    
```
// 3. String doesn't have copy trait :/

// Solution: use `s2:&str = &v[0]` instead.